USE movieclubdb1;
# USE movie_club;

# Drop tables with FK
DROP TABLE IF EXISTS rating;
DROP TABLE IF EXISTS review;
DROP TABLE IF EXISTS participant;
DROP TABLE IF EXISTS message;
DROP TABLE IF EXISTS movie_crew;
DROP TABLE IF EXISTS movie_genre;
DROP TABLE IF EXISTS movie_language;


# Drop base tables
DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS admin;
DROP TABLE IF EXISTS room;
DROP TABLE IF EXISTS movie;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS language;
DROP TABLE IF EXISTS crew;


-- Create base tables
CREATE TABLE IF NOT EXISTS user
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   username VARCHAR(120) UNIQUE NOT NULL,
   password VARCHAR(120),
   firstName VARCHAR(120),
   lastName VARCHAR(120),
   gender VARCHAR(20),
   birthday DATE,
   country VARCHAR(120),
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS admin
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   username VARCHAR(120) UNIQUE,
   password VARCHAR(120),
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS room
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(120) UNIQUE,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS movie
(
   id  INTEGER PRIMARY KEY AUTO_INCREMENT,
   title VARCHAR(120) UNIQUE NOT NULL,
   overview VARCHAR(1000),
   runtime INTEGER,
   trailerLink VARCHAR(120),
   poster BLOB,
   releaseDate DATE,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS genre
(
   id  INTEGER PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(120) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS language
(
   id  INTEGER PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(120) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS crew
(
   id  INTEGER PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(120) NOT NULL,
   role VARCHAR(120),
   dateOfBirth DATE,
   birthPlace VARCHAR(120),
   biography VARCHAR(120),
   website VARCHAR(120),
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create tables with FK
CREATE TABLE IF NOT EXISTS rating
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   movieId INTEGER NOT NULL,
   value INTEGER NOT NULL,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (movieId) REFERENCES movie (id)
       ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   movieId INTEGER NOT NULL,
   title VARCHAR(120) NOT NULL,
   content VARCHAR(200) NOT NULL,
   modifiedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (movieId) REFERENCES movie (id)
       ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS message
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   roomId INTEGER NOT NULL,
   content VARCHAR(200) NOT NULL,
   modifiedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (roomId) REFERENCES room (id)
       ON DELETE CASCADE
);

-- Create bridge tables
CREATE TABLE IF NOT EXISTS participant
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   roomId INTEGER NOT NULL,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (roomId) REFERENCES room (id)
       ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS movie_crew
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   movieId INTEGER NOT NULL,
   crewId INTEGER NOT NULL,
   roleId INTEGER NOT NULL,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (movieId) REFERENCES movie (id)
       ON DELETE CASCADE,
   FOREIGN KEY (crewId) REFERENCES crew (id)
       ON DELETE CASCADE,
   FOREIGN KEY (roleId) REFERENCES role (id)
       ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS movie_genre
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   movieId INTEGER NOT NULL,
   genreId INTEGER NOT NULL,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (movieId) REFERENCES movie (id)
       ON DELETE CASCADE,
   FOREIGN KEY (genreId) REFERENCES genre (id)
       ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS movie_language
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   movieId INTEGER NOT NULL,
   languageId INTEGER NOT NULL,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (movieId) REFERENCES movie (id)
       ON DELETE CASCADE,
   FOREIGN KEY (languageId) REFERENCES language (id)
       ON DELETE CASCADE
);

# -----------------------------------------------------
# Different Version

CREATE TABLE IF NOT EXISTS message
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   roomId INTEGER NOT NULL,
   content VARCHAR(200) NOT NULL,
   modifiedAt TIMESTAMP,
   createdAt TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (roomId) REFERENCES room (id)
       ON DELETE CASCADE
);

-- Create bridge tables
CREATE TABLE IF NOT EXISTS participant
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   roomId INTEGER NOT NULL,
   createdAt TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (roomId) REFERENCES room (id)
       ON DELETE CASCADE
);

# Table Population
INSERT INTO genre (name)
VALUES ('Drama'), ('Comedy'), ('Science Fiction'), ('Documentary'), ('Western'),
      ('Fiction'), ('Sports'), ('Historical'), ('War'), ('Adventure');

INSERT INTO language (name)
VALUES ('English'), ('Italian'), ('Spanish'), ('Danish'), ('Romanian'), ('German'),
      ('Chinese'), ('Japanese'), ('French'), ('Portuguese');
USE movieclubdb1;
# USE movie_club;

# Drop tables with FK
DROP TABLE IF EXISTS rating;
DROP TABLE IF EXISTS review;
DROP TABLE IF EXISTS participant;
DROP TABLE IF EXISTS message;
DROP TABLE IF EXISTS movie_crew;
DROP TABLE IF EXISTS movie_genre;
DROP TABLE IF EXISTS movie_language;


# Drop base tables
DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS admin;
DROP TABLE IF EXISTS room;
DROP TABLE IF EXISTS movie;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS language;
DROP TABLE IF EXISTS crew;


-- Create base tables
CREATE TABLE IF NOT EXISTS user
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   username VARCHAR(120) UNIQUE NOT NULL,
   password VARCHAR(120),
   firstName VARCHAR(120),
   lastName VARCHAR(120),
   gender VARCHAR(20),
   birthday DATE,
   country VARCHAR(120),
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS admin
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   username VARCHAR(120) UNIQUE,
   password VARCHAR(120),
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS room
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(120) UNIQUE,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS movie
(
   id  INTEGER PRIMARY KEY AUTO_INCREMENT,
   title VARCHAR(120) UNIQUE NOT NULL,
   overview VARCHAR(1000),
   runtime INTEGER,
   trailerLink VARCHAR(120),
   poster BLOB,
   releaseDate DATE,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS genre
(
   id  INTEGER PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(120) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS language
(
   id  INTEGER PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(120) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS crew
(
   id  INTEGER PRIMARY KEY AUTO_INCREMENT,
   name VARCHAR(120) NOT NULL,
   role VARCHAR(120),
   dateOfBirth DATE,
   birthPlace VARCHAR(120),
   biography VARCHAR(120),
   website VARCHAR(120),
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create tables with FK
CREATE TABLE IF NOT EXISTS rating
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   movieId INTEGER NOT NULL,
   value INTEGER NOT NULL,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (movieId) REFERENCES movie (id)
       ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   movieId INTEGER NOT NULL,
   title VARCHAR(120) NOT NULL,
   content VARCHAR(200) NOT NULL,
   modifiedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (movieId) REFERENCES movie (id)
       ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS message
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   roomId INTEGER NOT NULL,
   content VARCHAR(200) NOT NULL,
   modifiedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (roomId) REFERENCES room (id)
       ON DELETE CASCADE
);

-- Create bridge tables
CREATE TABLE IF NOT EXISTS participant
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   roomId INTEGER NOT NULL,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (roomId) REFERENCES room (id)
       ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS movie_crew
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   movieId INTEGER NOT NULL,
   crewId INTEGER NOT NULL,
   roleId INTEGER NOT NULL,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (movieId) REFERENCES movie (id)
       ON DELETE CASCADE,
   FOREIGN KEY (crewId) REFERENCES crew (id)
       ON DELETE CASCADE,
   FOREIGN KEY (roleId) REFERENCES role (id)
       ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS movie_genre
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   movieId INTEGER NOT NULL,
   genreId INTEGER NOT NULL,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (movieId) REFERENCES movie (id)
       ON DELETE CASCADE,
   FOREIGN KEY (genreId) REFERENCES genre (id)
       ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS movie_language
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   movieId INTEGER NOT NULL,
   languageId INTEGER NOT NULL,
   createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (movieId) REFERENCES movie (id)
       ON DELETE CASCADE,
   FOREIGN KEY (languageId) REFERENCES language (id)
       ON DELETE CASCADE
);

# -----------------------------------------------------
# Different Version

CREATE TABLE IF NOT EXISTS message
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   roomId INTEGER NOT NULL,
   content VARCHAR(200) NOT NULL,
   modifiedAt TIMESTAMP,
   createdAt TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (roomId) REFERENCES room (id)
       ON DELETE CASCADE
);

-- Create bridge tables
CREATE TABLE IF NOT EXISTS participant
(
   id INTEGER PRIMARY KEY AUTO_INCREMENT,
   userId INTEGER NOT NULL,
   roomId INTEGER NOT NULL,
   createdAt TIMESTAMP,
   FOREIGN KEY (userId) REFERENCES user (id)
       ON DELETE CASCADE,
   FOREIGN KEY (roomId) REFERENCES room (id)
       ON DELETE CASCADE
);

# Table Population
INSERT INTO genre (name)
VALUES ('Drama'), ('Comedy'), ('Science Fiction'), ('Documentary'), ('Western'),
      ('Fiction'), ('Sports'), ('Historical'), ('War'), ('Adventure');

INSERT INTO language (name)
VALUES ('English'), ('Italian'), ('Spanish'), ('Danish'), ('Romanian'), ('German'),
      ('Chinese'), ('Japanese'), ('French'), ('Portuguese');
